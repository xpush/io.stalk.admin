#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-checkin:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */




var io = require('socket.io')(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var servers = {};
var masterSocket={};
var masterSocektIds = {};

var attendantSocket = {};



io.on('connection', function (socket) {

    socket.on('master yet', function(data){
        var group = data.group;
        if(masterSocket[group]){
            socket.emit('master exist',{})
        }
    });

    socket.on('letscheck ready', function (data){
      var group = data.group+"^letscheck";
      socket.join(group);
    })

    socket.on('checkin today', function (data){
      var group = data.group+"^letscheck";
      socket.broadcast.to(group).emit('checkin today');
    })

    socket.on('reply checkin', function (data){
      var group = data.group+"^letscheck";

      var checkIn = data.checkIn;
      console.log("show me the money");
      io.sockets.in(group).emit('reply checkin',{mongoid:checkIn._id,reply:checkIn.reply});
    })

    socket.on('start', function (data) {

        var group = data.group;
        socket.join(group);
        masterSocket[group] = socket;
        masterSocektIds[socket.id] = group;
        socket.broadcast.to(group).emit('start beep');

    });

    socket.on('regist group', function(data){
        var group = data.group;
        socket.join(group);

        if(masterSocket[group]){
            var count = Object.keys(io.sockets.adapter.rooms[group]).length;
            console.log(count);
            masterSocket[group].emit('join attendant',{count:count});
            socket.emit('beep already started',{});
        }
    })

    socket.on('stop', function (data) {
        var group = data.group;

        delete masterSocektIds[socket.id];
        delete masterSocket[group];

        socket.broadcast.to(group).emit('stop beep');
    });

    socket.on('disconnect',function(data){
        if(masterSocektIds[socket.id]){
            var group = masterSocektIds[socket.id];

            socket.broadcast.to(group).emit('stop beep');

            delete masterSocektIds[socket.id];
            delete masterSocket[group];

        }
    });


    socket.on('boozer', function (data) {
        if(masterSocket[data.group]){
            masterSocket[data.group].emit('boozer',{});
        }
    });



    function registerMaster(socket,group, callback){
        // socket_id와 nickname 테이블을 셋업
        socket.get('group',function(err,pre_group){
            if(pre_group != undefined ) delete masterSocket[pre_group];

            socket.set('group',group,function(){
                masterSocket[group] = socket;
                callback();
            });

        });
    }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
